/*
 * Ray.java
 *
 * Created on 15. Dezember 2005, 14:51
 */

package jay.maths;

/**
 * @author Matthias Treydte
 */
public final class Ray {
    
    public final static float EPSILON = 1e-3f;
    
    /** Ursprung */
    public final Point o;
    
    /** Richtung */
    public final Vector d;
    
    /** minimale Entfernung von o */
    public float tmin;
    
    /** maximale Entfernung von o */
    public float tmax;
    
    /**
     * The number of bsp cells this ray was traced through
     * before an Intersection was found.
     */
    public int cellsVisited = 0;
    
    /**
     * The number of intersection tests performed
     * with this ray.
     */
    public int intersections = 0;
    
    /**
     * For primary rays (generated by a camera) this
     * counts the number of secondary rays generated
     * (for global illumination) because of this ray.
     */
    public int secondaryRays = 0;
    
    public Ray() {
        this(new Point(), new Vector(0, 1, 0));
    }
    
    public Ray(Point o, Vector d, float tmin, float tmax) {
        this.o = o; this.d = d; this.tmin = tmin; this.tmax = tmax;
    }
    
    public Ray(Point o, Vector d) {
        this.o = o; this.d = d;
        this.tmin = EPSILON; this.tmax = Float.POSITIVE_INFINITY;
    }
    
    public Ray(Ray r) {
        this(r.o, r.d, r.tmin, r.tmax);
    }
    
    public Point at(float t) {
        return o.add(d.mul(t));
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        
        sb.append("Ray [Origin: ");
        sb.append(o.toString());
        sb.append(", Direction: ");
        sb.append(d.toString());
        sb.append(", tmin: " + tmin);
        sb.append(", tmax: " + tmax);
        sb.append("]");
        
        return sb.toString();
    }
    
    public Ray setOrigin(Point newOrigin) {
        return new Ray(newOrigin, d, tmin, tmax);
    }
    
    public Ray setDirection(Vector newDirection) {
        return new Ray(o, newDirection, tmin, tmax);
    }
    
    /**
     * Returns a new ray with the same properties as
     * this ray, except for the direction component 
     * being normalized.
     *
     * @return The ray with a normalized direction component.
     */
    public Ray normalized() {
        return new Ray(o, d.normalized(), tmin, tmax);
    }
}
